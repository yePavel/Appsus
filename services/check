const { useState, useEffect, useRef } = React
const { useParams, useNavigate } = ReactRouter

import { Textbox } from './Textbox.jsx'
import { noteService } from './../services/note.service.js'
import { ColorInput } from "./ColorInput.jsx";

export function NoteAdd({ onLoad }) {
    const [cmpType, setCmpType] = useState('')
    const [note, setNote] = useState(noteService.getEmptyNote())
    const wrapperRef = useRef(null)
    const [selectedColor, setSelectedColor] = useState({
        backgroundColor: '#fff',
    })


    function onSaveNote() {
        if (note.info.txt === '') return;

     

        noteService.saveNewNote(note)
            .then(() => {
               
                setNote(noteService.getEmptyNote())
            
            })
            .catch(() => {
                alert('Could not save the note');
            })
            .finally(() => {
        
                onLoad()

            })
    }

    useEffect(() => {
        function handleClickOutside(event) {
            if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {
                onSaveNote()
            }
        }

  
            document.addEventListener('mousedown', handleClickOutside)
            return () => {
                document.removeEventListener('mousedown', handleClickOutside)
               
            }
      
    }, [note])


    function handleChange({ target }) {
        const { type, name: prop } = target
        let { value } = target

        switch (type) {
            case 'range':
            case 'number':
                value = +value
                break
            case 'checkbox':
                value = target.checked
                break
        }
          
        setNote(prevNote => ({
            ...prevNote,
            info: {
                ...prevNote.info,
                [prop]: value
            }
        }))
    }

    function onchangeCmpType(selectedType) {
        setCmpType(prevType => (prevType === selectedType ? '' : selectedType))
    }

    function onSetFooterStyle(newStyle) {
        setSelectedColor(prevStyle => ({ ...prevStyle, ...newStyle }))

        setNote(prevNote => ({
            ...prevNote,
            style: {
                ...prevNote.style,
                ...newStyle
            }
        }))
    }


    return (
        <div className='note-add-txt'>
            <div style={selectedColor} className='note-add' ref={wrapperRef}>
                <form onSubmit={onSaveNote}>
                    <input
                        style={selectedColor}
                        type='text'
                        name='title'
                        placeholder='Title'
                        value={note.info.title}
                        onChange={handleChange}
                        className='note-title'
                    />
                    <Textbox className='note-text' handleChange={handleChange} name='txt' value={note.info.txt}  />

                    <button type='button' className="color-picker-button" onClick={() => onchangeCmpType('color')}>
                        <i className="fas fa-palette"></i>
                    </button>

                    <DynamicCmp selectedColor={selectedColor} cmpType={cmpType} onSetFooterStyle={onSetFooterStyle} />
                </form>
            </div>
        </div>
    )


}

function DynamicCmp(props) {

    switch (props.cmpType) {
        case 'color':
            return <ColorInput {...props} />

    }
}



// .note-add-txt {
//     display: flex;
//     justify-content: center;
//     align-items: center;
//     /* height: 100vh; */
// }

// .note-add {
//     background-color: white;
//     border-radius: 8px;
//     box-shadow: 0 1px 5px rgba(0, 0, 0, 0.2);
//     padding: 16px;
//     margin: 16px;
//     max-width: 600px;
//     display: flex;
//     flex-direction: column;
// }

// .note-title {
//     border: none;
//     border-bottom: 1px solid #e0e0e0;
//     margin-bottom: 8px;
//     font-size: 16px;
//     outline: none;
// }

// .note-text {
//     border: none;
//     font-size: 14px;
//     resize: none;
//     outline: none;
//     margin-bottom: 8px;
// }

// .save-note-button {
//     align-self: flex-end;
//     background-color: #6200ea;
//     color: white;
//     border: none;
//     padding: 8px 16px;
//     border-radius: 4px;
//     cursor: pointer;
//     font-size: 14px;
// }

// .note-add .items-container {
//     display: flex;
//     gap: 5px;
//     justify-content: center;

// }

// .note-add .item {
//     border: whitesmoke 2px solid;
//     padding: 3px;
//     margin: 3px;
//     min-height: 30px;
//     min-width: 30px;
//     cursor: pointer;
//     display: grid;
//     place-items: center;
//     border-radius: 50%;
//     overflow: hidden;
//     transition: transform 0.2s ease;
// }

// .note-add .item:hover {
//     transform: scale(1.1);
// }

// .note-add .item.selected {
//     border: 2px solid purple !important;
// }

// .color-picker-button {
//     padding: 12px 16px;
//     border: none;
//     color: #303030;
//     border-radius: 8px;
//     cursor: pointer;
//     transition: background-color 0.2s ease;
//     background-color: transparent;

    
// }

// .color-picker-button:hover {
//     background-color: #f0f0f0; 
// }

// color-picker-button::before {
//     content: url('path/to/icon.svg');
//     margin-right: 8px;
// }